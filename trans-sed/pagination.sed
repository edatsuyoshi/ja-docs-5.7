s/^# Database: Pagination$/# データベース：ペジネーション/
s/^- \[Introduction\](#introduction)$/- [イントロダクション](#introduction)/
s/^- \[Basic Usage\](#basic-usage)$/- [基本的な使用法](#basic-usage)/
s/^    - \[Paginating Query Builder Results\](#paginating-query-builder-results)$/    - [クエリビルダの結果](#paginating-query-builder-results)/
s/^    - \[Paginating Eloquent Results\](#paginating-eloquent-results)$/    - [Eloquentの結果](#paginating-eloquent-results)/
s/^    - \[Manually Creating A Paginator\](#manually-creating-a-paginator)$/    - [独自ペジネータ作成](#manually-creating-a-paginator)/
s/^- \[Displaying Pagination Results\](#displaying-pagination-results)$/- [ペジネーション結果の表示](#displaying-pagination-results)/
s/^    - \[Converting Results To JSON\](#converting-results-to-json)$/    - [結果のJSON変換](#converting-results-to-json)/
s/^- \[Customizing The Pagination View\](#customizing-the-pagination-view)$/- [ペジネーションビューのカスタマイズ](#customizing-the-pagination-view)/
s/^- \[Paginator Instance Methods\](#paginator-instance-methods)$/- [ペジネータインスタンスメソッド](#paginator-instance-methods)/
s/^## Introduction$/## イントロダクション/
s/^In other frameworks, pagination can be very painful\. Laravel's paginator is integrated with the \[query builder\](\/docs\/{{version}}\/queries) and \[Eloquent ORM\](\/docs\/{{version}}\/eloquent) and provides convenient, easy-to-use pagination of database results out of the box\. The HTML generated by the paginator is compatible with the \[Bootstrap CSS framework\](https:\/\/getbootstrap\.com\/)\.$/他のフレームワークのペジネーションは苦痛に満ちています。Laravelのペジネータは[クエリビルダ](\/docs\/{{version}}\/queries)と[Eloquent ORM](\/docs\/{{version}}\/eloquent)に統合されており、データベースの結果を簡単、お手軽にペジネーションできます。ペジネータが生成するHTMLは、[Bootstrap CSSフレームワーク](https:\/\/getbootstrap.com\/)コンパチブルです。/
s/^## Basic Usage$/## 基本的な使用法/
s/^### Paginating Query Builder Results$/### クエリビルダの結果/
s/^There are several ways to paginate items\. The simplest is by using the `paginate` method on the \[query builder\](\/docs\/{{version}}\/queries) or an \[Eloquent query\](\/docs\/{{version}}\/eloquent)\. The `paginate` method automatically takes care of setting the proper limit and offset based on the current page being viewed by the user\. By default, the current page is detected by the value of the `page` query string argument on the HTTP request\. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator\.$/アイテムをペジネーションするには多くの方法があります。一番簡単な方法は、[クエリビルダ](\/docs\/{{version}}\/queries)と[Eloquent query](\/docs\/{{version}}\/eloquent)へ`paginate`メソッドを使う方法です。`paginate`メソッドは、ユーザーが表示している現在のページに基づき、正しいアイテム数とオフセットを指定する面倒を見ます。デフォルトではHTTPリクエストの`page`クエリ文字列引数の値により現在ページが決められます。もちろんこの値はLaravelが自動的に探し、さらにペジネーターが挿入するリンクを自動的に生成します。/
s/^In this example, the only argument passed to the `paginate` method is the number of items you would like displayed "per page"\. In this case, let's specify that we would like to display `15` items per page:$/以下の例では、`paginate`に一つだけ引数を渡しており、「ページごと」に表示したいアイテム数です。この例ではページごとに`15`アイテムを表示するように指定しています。/
s/^        \/\*\*$/        \/**/
s/^         \* Show all of the users for the application\.$/         * アプリケーションの全ユーザー表示/
s/^         \*$/         */
s/^         \* @return Response$/         * @return Response/
s/^         \*\/$/         *\//
s/^            return view('user\.index', \['users' => $users\]);$/            return view('user.index', ['users' => $users]);/
s/^> {note} Currently, pagination operations that use a `groupBy` statement cannot be executed efficiently by Laravel\. If you need to use a `groupBy` with a paginated result set, it is recommended that you query the database and create a paginator manually\.$/> {note} 現在`groupBy`文を使用したペジネーション操作は、Laravelで効率よく実行できません。`groupBy`を使用したペジネーションを使用する必要がある場合はデータベースクエリを実行し、その結果を元にペジネーターを自前で作成してください。/
s/^#### "Simple Pagination"$/#### シンプル・ペジネーション/
s/^If you only need to display simple "Next" and "Previous" links in your pagination view, you may use the `simplePaginate` method to perform a more efficient query\. This is very useful for large datasets when you do not need to display a link for each page number when rendering your view:$/「次」と「前」のリンクだけのシンプルなペジネーションビューを表示したい場合は`simplePaginate`メソッドを使用し、より効率的にクエリすべきでしょう。これはビューに正確なページ番号を表示する必要がない、巨大なデータセットを扱う場合に便利です。/
s/^### Paginating Eloquent Results$/### Eloquentの結果/
s/^You may also paginate \[Eloquent\](\/docs\/{{version}}\/eloquent) queries\. In this example, we will paginate the `User` model with `15` items per page\. As you can see, the syntax is nearly identical to paginating query builder results:$/さらに[Eloquent](\/docs\/{{version}}\/eloquent)モデルもペジネーションできます。例として`User`モデルの`15`アイテムをページ付け表示してみましょう。ご覧の通り、クエリビルダ結果のペジネーションを行う記法はきれいでわかりやすいものです。/
s/^Of course, you may call `paginate` after setting other constraints on the query, such as `where` clauses:$/もちろん`where`節のような制約をクエリに指定した後に`paginate`を呼び出すこともできます。/
s/^You may also use the `simplePaginate` method when paginating Eloquent models:$/Elqouentモデルをページづけするときにも、`simplePaginate`メソッドを使用できます。/
s/^### Manually Creating A Paginator$/### 独自ペジネータ作成/
s/^Sometimes you may wish to create a pagination instance manually, passing it an array of items\. You may do so by creating either an `Illuminate\\Pagination\\Paginator` or `Illuminate\\Pagination\\LengthAwarePaginator` instance, depending on your needs\.$/渡された配列を元にして、ペジネーションインスンタンスを作成したいこともあります。必要に応じて`Illuminate\\Pagination\\Paginator`か、`Illuminate\\Pagination\\LengthAwarePaginator`インスタンスを生成することで実現できます。/
s/^The `Paginator` class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieving the index of the last page\. The `LengthAwarePaginator` accepts almost the same arguments as the `Paginator`; however, it does require a count of the total number of items in the result set\.$/`Paginator`クラスは結果にセットされているアイテムの総数を知る必要はありません。そのためクラスは最終ページのインデックスを取得するメソッドを持っていません。`LengthAwarePaginator`は`Paginator`とほとんど同じ引数を取りますが、結果にセットされているアイテム総数も指定する必要がある点が異なっています。/
s/^In other words, the `Paginator` corresponds to the `simplePaginate` method on the query builder and Eloquent, while the `LengthAwarePaginator` corresponds to the `paginate` method\.$/言い換えれば、`Paginator`はクエリビルダとEloquentに対する`simplePaginate`メソッドに対応し、一方の`LengthAwarePaginator`は`paginate`に対応しています。/
s/^> {note} When manually creating a paginator instance, you should manually "slice" the array of results you pass to the paginator\. If you're unsure how to do this, check out the \[array_slice\](https:\/\/secure\.php\.net\/manual\/en\/function\.array-slice\.php) PHP function\.$/> {note} 自前でペジネーターインスタンスを生成する場合、ペジネーターに渡す結果の配列を自分で"slice"する必要があります。その方法を思いつかなければ、[array_slice](https:\/\/secure.php.net\/manual\/en\/function.array-slice.php) PHP関数を調べてください。/
s/^## Displaying Pagination Results$/## ペジネーション結果の表示/
s/^When calling the `paginate` method, you will receive an instance of `Illuminate\\Pagination\\LengthAwarePaginator`\. When calling the `simplePaginate` method, you will receive an instance of `Illuminate\\Pagination\\Paginator`\. These objects provide several methods that describe the result set\. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array\. So, once you have retrieved the results, you may display the results and render the page links using \[Blade\](\/docs\/{{version}}\/blade):$/`paginate`メソッドを呼び出す場合、`Illuminate\\Pagination\\LengthAwarePaginator`インスタンスを受け取ります。`simplePaginate`メソッドを呼び出すときは、`Illuminate\\Pagination\\Paginator`インスタンスを受け取ります。これらのオブジェクトは結果を表すたくさんのメソッドを提供しています。こうしたヘルパメソッドに加え、ペジネーターインスタンスはイテレータでもあり、配列としてループ処理できます。つまり結果を取得したら、その結果とページリンクを[Blade](\/docs\/{{version}}\/blade)を使い表示できます。/
s/^The `links` method will render the links to the rest of the pages in the result set\. Each of these links will already contain the proper `page` query string variable\. Remember, the HTML generated by the `links` method is compatible with the \[Bootstrap CSS framework\](https:\/\/getbootstrap\.com)\.$/`links`メソッドは結果の残りのページヘのリンクをレンダーします。それらの各リンクには`page`クエリ文字列変数が含まれています。`links`メソッドが生成するHTMLは[Bootstrap CSSフレームワーク](https:\/\/getbootstrap.com)と互換性があることを覚えておいてください。/
s/^#### Customizing The Paginator URI$/#### ペジネーターURIのカスタマイズ/
s/^The `withPath` method allows you to customize the URI used by the paginator when generating links\. For example, if you want the paginator to generate links like `http:\/\/example\.com\/custom\/url?page=N`, you should pass `custom\/url` to the `withPath` method:$/`withPath`メソッドにより、ペジネーターがリンクを生成するときに使用するURIをカスタマイズできます。たとえばペジネーターで`http:\/\/example.com\/custom\/url?page=N`のようなリンクを生成したい場合、`withPath`メソッドに`custom\/url`を渡してください。/
s/^#### Appending To Pagination Links$/#### ペジネーションリンクの追加/
s/^You may append to the query string of pagination links using the `appends` method\. For example, to append `sort=votes` to each pagination link, you should make the following call to `appends`:$/ペジネーションリンクにクエリ文字列を付け加えたいときは、`appends`メソッドを使います。たとえば`sort=votes`を各ペジネーションリンクに追加する場合には、以下のように`appends`を呼び出します。/
s/^    {{ $users->appends(\['sort' => 'votes'\])->links() }}$/    {{ $users->appends(['sort' => 'votes'])->links() }}/
s/^If you wish to append a "hash fragment" to the paginator's URLs, you may use the `fragment` method\. For example, to append `#foo` to the end of each pagination link, make the following call to the `fragment` method:$/ペジネーションのURLに「ハッシュフラグメント」を追加したい場合は、`fragment`メソッドが使用できます。例えば各ペジネーションリンクの最後に`#foo`を追加したい場合は、以下のように`fragment`メソッドを呼び出します。/
s/^### Converting Results To JSON$/### 結果のJSON変換/
s/^The Laravel paginator result classes implement the `Illuminate\\Contracts\\Support\\Jsonable` Interface contract and expose the `toJson` method, so it's very easy to convert your pagination results to JSON\. You may also convert a paginator instance to JSON by returning it from a route or controller action:$/Laravelのペジネーター結果クラスは`Illuminate\\Contracts\\Support\\Jsonable`インターフェイス契約を実装しており、`toJson`メソッドを提示しています。ですからペジネーション結果をJSONにとても簡単に変換できます。またルートやコントローラアクションからペジネーターインスタンスを返せば、JSONへ変換されます。/
s/^The JSON from the paginator will include meta information such as `total`, `current_page`, `last_page`, and more\. The actual result objects will be available via the `data` key in the JSON array\. Here is an example of the JSON created by returning a paginator instance from a route:$/ペジネーターのJSON形式は`total`、`current_page`、`last_page`などのメタ情報を含んでいます。実際の結果オブジェクトはJSON配列の`data`キーにより利用できます。ルートから返されたペジネーターインスタンスにより生成されるJSONの一例を見てください。/
s/^       "first_page_url": "http:\/\/laravel\.app?page=1",$/       "first_page_url": "http:\/\/laravel.app?page=1",/
s/^       "last_page_url": "http:\/\/laravel\.app?page=4",$/       "last_page_url": "http:\/\/laravel.app?page=4",/
s/^       "next_page_url": "http:\/\/laravel\.app?page=2",$/       "next_page_url": "http:\/\/laravel.app?page=2",/
s/^       "path": "http:\/\/laravel\.app",$/       "path": "http:\/\/laravel.app",/
s/^       "data":\[$/       "data":[/
s/^                \/\/ Result Object$/                \/\/ 結果のオブジェクト/
s/^                \/\/ Result Object$/                \/\/ 結果のオブジェクト/
s/^       \]$/       ]/
s/^## Customizing The Pagination View$/## ペジネーションビューのカスタマイズ/
s/^By default, the views rendered to display the pagination links are compatible with the Bootstrap CSS framework\. However, if you are not using Bootstrap, you are free to define your own views to render these links\. When calling the `links` method on a paginator instance, pass the view name as the first argument to the method:$/デフォルトで、ペジネーションリンクを表示するためのビューはBootstrap CSSフレームワークを用いてレンダーされます。しかし、Bootstrapを使っていない場合でも、そうしたリンクをレンダーする独自のビューを自由に定義できます。ペジネータインスタンスの`links`メソッドを呼び出す際に、ビュー名をメソッドの最初の引数として渡してください。/
s/^    {{ $paginator->links('view\.name') }}$/    {{ $paginator->links('view.name') }}/
s/^    \/\/ Passing data to the view\.\.\.$/    \/\/ ビューへデータを渡す/
s/^    {{ $paginator->links('view\.name', \['foo' => 'bar'\]) }}$/    {{ $paginator->links('view.name', ['foo' => 'bar']) }}/
s/^However, the easiest way to customize the pagination views is by exporting them to your `resources\/views\/vendor` directory using the `vendor:publish` command:$/しかし、`vendor:publish`コマンドを使用し、`resources\/views\/vendor`ディレクトリへペジネーションビューを作成し、カスタマイズする方法が一番簡単でしょう。/
s/^This command will place the views in the `resources\/views\/vendor\/pagination` directory\. The `bootstrap-4\.blade\.php` file within this directory corresponds to the default pagination view\. You may edit this file to modify the pagination HTML\.$/このコマンドは、`resources\/views\/vendor\/pagination`ディレクトリへビューを設置します。このディレクトリの`bootstrap-4.blade.php`ファイルが、デフォルトのペジネーションビューに当ります。ペジネーションHTMLを変更するために、このファイルを編集できます。/
s/^If you would like to designate a different file as the default pagination view, you may use the paginator's `defaultView` and `defaultSimpleView` methods within your `AppServiceProvider`:$/デフォルトのペジネーションビューとして、他のファイルを指定したい場合は、`AppServiceProvider`の中で、ペジネータの`defaultView`と`defaultSimpleView`メソッドを使用します。/
s/^## Paginator Instance Methods$/## ペジネータインスタンスメソッド/
s/^Each paginator instance provides additional pagination information via the following methods:$/ペジネータインスタンスは以下の追加ペジネーション情報を提供しています。/
s/^- `$results->lastPage() (Not available when using simplePaginate)`$/- `$results->lastPage() (simplePaginateでは使用不可)`/
s/^- `$results->total() (Not available when using simplePaginate)`$/- `$results->total() (simplePaginateでは使用不可)`/
