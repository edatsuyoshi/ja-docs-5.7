s/^# Facades$/# ファサード/
s/^- \[Introduction\](#introduction)$/- [イントロダクション](#introduction)/
s/^- \[When To Use Facades\](#when-to-use-facades)$/- [いつファサードを使うか](#when-to-use-facades)/
s/^    - \[Facades Vs\. Dependency Injection\](#facades-vs-dependency-injection)$/    - [ファサード 対 依存注入](#facades-vs-dependency-injection)/
s/^    - \[Facades Vs\. Helper Functions\](#facades-vs-helper-functions)$/    - [ファサード 対 ヘルパ関数](#facades-vs-helper-functions)/
s/^- \[How Facades Work\](#how-facades-work)$/- [ファサードの仕組み](#how-facades-work)/
s/^- \[Real-Time Facades\](#real-time-facades)$/- [リアルタイムファサード](#real-time-facades)/
s/^- \[Facade Class Reference\](#facade-class-reference)$/- [ファサードクラス一覧](#facade-class-reference)/
s/^## Introduction$/## イントロダクション/
s/^Facades provide a "static" interface to classes that are available in the application's \[service container\](\/docs\/{{version}}\/container)\. Laravel ships with many facades which provide access to almost all of Laravel's features\. Laravel facades serve as "static proxies" to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods\.$/ファサード（facade、「入り口」）はアプリケーションの[サービスコンテナ](\/docs\/{{version}}\/container)に登録したクラスへ、「静的」なインターフェイスを提供します。Laravelのほとんどの機能に対して、ファサードが用意されています。Laravelの「ファサード」は、サービスコンテナ下で動作しているクラスに対し、"static proxy"として動作しています。これにより伝統的な静的メソッドよりもテストの行いやすさと柔軟性を保ちながらも、簡潔で記述的であるという利点があります。/
s/^All of Laravel's facades are defined in the `Illuminate\\Support\\Facades` namespace\. So, we can easily access a facade like so:$/Laravelのファサードはすべて、`Illuminate\\Support\\Facades`名前空間下で定義されています。ですから、簡単にファサードへアクセスできます。/
s/^Throughout the Laravel documentation, many of the examples will use facades to demonstrate various features of the framework\.$/フレームワークの様々な機能をデモンストレートするために、Laravelのドキュメント全般でたくさんの例がファサードを使用しています。/
s/^## When To Use Facades$/## いつファサードを使うか/
s/^Facades have many benefits\. They provide a terse, memorable syntax that allows you to use Laravel's features without remembering long class names that must be injected or configured manually\. Furthermore, because of their unique usage of PHP's dynamic methods, they are easy to test\.$/ファサードにはたくさんの利点があります。自分で取り込んだり、設定したりする必要があり、長くて覚えにくいクラス名を使わずに、Laravelの機能を簡素で覚えやすい文法で使ってもらえます。その上に、PHPの動的メソッドのユニークな使用方法のおかげで、簡単にテストができます。/
s/^However, some care must be taken when using facades\. The primary danger of facades is class scope creep\. Since facades are so easy to use and do not require injection, it can be easy to let your classes continue to grow and use many facades in a single class\. Using dependency injection, this potential is mitigated by the visual feedback a large constructor gives you that your class is growing too large\. So, when using facades, pay special attention to the size of your class so that its scope of responsibility stays narrow\.$/しかしながら、ファサードの使用にはいくつか気をつけるべき点も存在します。ファサードの一番の危険性は、クラスの責任範囲の暴走です。ファサードはとても簡単に使用でき、依存注入も必要ないため、簡単にクラスが成長し続ける結果、一つのクラスで多くのファサードが使われます。依存注入を使用すれば、クラスが大きくなりすぎることに伴う、大きなコンストラクタの視覚的なフィードバックにより、この危険性は抑制されます。ですから、ファサードを使用するときは、クラスの責任範囲を小さくとどめるため、クラスサイズに特に注意をはらいましょう。/
s/^> {tip} When building a third-party package that interacts with Laravel, it's better to inject \[Laravel contracts\](\/docs\/{{version}}\/contracts) instead of using facades\. Since packages are built outside of Laravel itself, you will not have access to Laravel's facade testing helpers\.$/> {tip} Laravelに関連した、サードパーティパッケージを構築する場合は、ファサードの代わりに[Laravelの契約](\/docs\/{{version}}\/contracts)を使うほうが好ましいでしょう。Laravel自身の外でパッケージを構築するわけですから、Laravelのテストヘルパへアクセスする必要はありません。/
s/^### Facades Vs\. Dependency Injection$/### ファサード 対 依存注入/
s/^One of the primary benefits of dependency injection is the ability to swap implementations of the injected class\. This is useful during testing since you can inject a mock or stub and assert that various methods were called on the stub\.$/依存注入の最大の利便性は、注入するクラスの実装を入れ替えられるという機能です。モックやスタブを注入し、そうした代替オブジェクトの様々なメソッドのアサートが行えるため、テスト中に便利です。/
s/^Typically, it would not be possible to mock or stub a truly static class method\. However, since facades use dynamic methods to proxy method calls to objects resolved from the service container, we actually can test facades just as we would test an injected class instance\. For example, given the following route:$/本当の静的クラスメソッドをモックしたり、スタブにすることは、通常は不可能です。しかしファサードは、サービスコンテナが依存解決したオブジェクトの代替メソッドを呼び出すために、動的メソッドが使えますので、注入したクラスインスタンスをテストするのと同様に、ファサードを実際にテスト可能です。/
s/^We can write the following test to verify that the `Cache::get` method was called with the argument we expected:$/`Cache::get`メソッドが、予想した引数で呼び出されることを確認するために、以下のようなテストを書けます。/
s/^    \/\*\*$/    \/**/
s/^     \* A basic functional test example\.$/     * 基本的なテスト機能の例/
s/^     \*$/     */
s/^     \* @return void$/     * @return void/
s/^     \*\/$/     *\//
s/^### Facades Vs\. Helper Functions$/### ファサード 対 ヘルパ関数/
s/^In addition to facades, Laravel includes a variety of "helper" functions which can perform common tasks like generating views, firing events, dispatching jobs, or sending HTTP responses\. Many of these helper functions perform the same function as a corresponding facade\. For example, this facade call and helper call are equivalent:$/ファサードに加え、Laravelは様々な「ヘルパ」関数を用意しており、ビューの生成、イベントの発行、ジョブの起動、HTTPレスポンスの送信など、一般的なタスクを実行できます。こうしたヘルパ関数の多くは、対応するファサードと同じ機能を実行します。たとえば、以下のファサードとヘルパの呼び出しは、同じ働きをします。/
s/^There is absolutely no practical difference between facades and helper functions\. When using helper functions, you may still test them exactly as you would the corresponding facade\. For example, given the following route:$/ここではファサードとヘルパ関数との間に、全く違いはありません。ヘルパ関数を使う場合も、対応するファサードと全く同様にテストできます。たとえば、以下のルートが存在するとしましょう。/
s/^Under the hood, the `cache` helper is going to call the `get` method on the class underlying the `Cache` facade\. So, even though we are using the helper function, we can write the following test to verify that the method was called with the argument we expected:$/内部で`cache`ヘルパは、`Cache`ファサードの裏で動作しているクラスの`get`メソッドを呼び出します。ですから、ヘルパ関数を使用していても、期待する引数でメソッドが呼びだされていることを確認する、以下のテストを書けます。/
s/^    \/\*\*$/    \/**/
s/^     \* A basic functional test example\.$/     * 基本的なテスト機能の例/
s/^     \*$/     */
s/^     \* @return void$/     * @return void/
s/^     \*\/$/     *\//
s/^## How Facades Work$/## ファサードの仕組み/
s/^In a Laravel application, a facade is a class that provides access to an object from the container\. The machinery that makes this work is in the `Facade` class\. Laravel's facades, and any custom facades you create, will extend the base `Illuminate\\Support\\Facades\\Facade` class\.$/Laravelアプリケーション中で、ファサードとは、コンテナを通じてオブジェクトにアクセス方法を提供するクラスのことです。`Facade`クラス中の仕組みでこれを行なっています。Laravelのファサードと皆さんが作成するカスタムファサードは、`Illuminate\\Support\\Facades\\Facade`クラスを拡張します。/
s/^The `Facade` base class makes use of the `__callStatic()` magic-method to defer calls from your facade to an object resolved from the container\. In the example below, a call is made to the Laravel cache system\. By glancing at this code, one might assume that the static method `get` is being called on the `Cache` class:$/`Facade`基本クラスは、ファサードへの関数呼び出しをコンテナにより依存解決されたオブジェクトへ送るため、`__callStatic()`マジックメソッドを使用します。下の例では、Laravelのキャッシュシステムを呼び出しています。これを読むと一見、`Cache`クラスのstaticな`get`メソッドが呼び出されているのだと考えてしまうことでしょう。/
s/^        \/\*\*$/        \/**/
s/^         \* Show the profile for the given user\.$/         * 指定したユーザーのプロフィール表示/
s/^         \*$/         */
s/^         \* @param  int  $id$/         * @param  int  $id/
s/^         \* @return Response$/         * @return Response/
s/^         \*\/$/         *\//
s/^            $user = Cache::get('user:'\.$id);$/            $user = Cache::get('user:'.$id);/
s/^            return view('profile', \['user' => $user\]);$/            return view('profile', ['user' => $user]);/
s/^Notice that near the top of the file we are "importing" the `Cache` facade\. This facade serves as a proxy to accessing the underlying implementation of the `Illuminate\\Contracts\\Cache\\Factory` interface\. Any calls we make using the facade will be passed to the underlying instance of Laravel's cache service\.$/ファイルの先頭で、`Cache`ファサードを取り込んでいることに注目です。このファサードサービスは、`Illuminate\\Contracts\\Cache\\Factory`インターフェイスの裏にある実装へアクセスするプロキシとして動作します。ファサードを使ったメソッド呼び出しは、裏のLaravelのキャッシュサービスの実装へ渡されます。/
s/^If we look at that `Illuminate\\Support\\Facades\\Cache` class, you'll see that there is no static method `get`:$/そのため、`Illuminate\\Support\\Facades\\Cache`クラスを見てもらえば、staticの`get`メソッドは存在していないことが分かります。/
s/^        \/\*\*$/        \/**/
s/^         \* Get the registered name of the component\.$/         * コンポーネントの登録名を取得/
s/^         \*$/         */
s/^         \* @return string$/         * @return string/
s/^         \*\/$/         *\//
s/^Instead, the `Cache` facade extends the base `Facade` class and defines the method `getFacadeAccessor()`\. This method's job is to return the name of a service container binding\. When a user references any static method on the `Cache` facade, Laravel resolves the `cache` binding from the \[service container\](\/docs\/{{version}}\/container) and runs the requested method (in this case, `get`) against that object\.$/かわりに`Cache`ファサードは、`Facade`ベースクラスを拡張し、`getFacadeAccessor()`メソッドを定義しています。このメソッドの仕事は、サービスコンテナの結合名を返すことです。ユーザーが`Cache`ファサードのどのstaticメソッドを利用しようと、Laravelは[サービスコンテナ](\/docs\/{{version}}\/container)から`cache`に結び付けられたインスタンスを依存解決し、要求されたメソッドを（この場合は`get`）そのオブジェクトに対し実行します。/
s/^## Real-Time Facades$/## リアルタイムファサード/
s/^Using real-time facades, you may treat any class in your application as if it were a facade\. To illustrate how this can be used, let's examine an alternative\. For example, let's assume our `Podcast` model has a `publish` method\. However, in order to publish the podcast, we need to inject a `Publisher` instance:$/リアルタムファサードを使用すれば、アプリケーション中のどんなクラスでも、ファサードとして取り扱えます。活用法を示すために、新しいテストの手法を撮ってみましょう。例として、`Podcast`モデルが`publish`メソッドを持っているとしましょう。しかしポッドキャストを公開(publish)するには、`Publisher`インスタンスを注入する必要があるとします。/
s/^        \/\*\*$/        \/**/
s/^         \* Publish the podcast\.$/         * ポッドキャストの公開/
s/^         \*$/         */
s/^         \* @param  Publisher  $publisher$/         * @param  Publisher  $publisher/
s/^         \* @return void$/         * @return void/
s/^         \*\/$/         *\//
s/^            $this->update(\['publishing' => now()\]);$/            $this->update(['publishing' => now()]);/
s/^Injecting a publisher implementation into the method allows us to easily test the method in isolation since we can mock the injected publisher\. However, it requires us to always pass a publisher instance each time we call the `publish` method\. Using real-time facades, we can maintain the same testability while not being required to explicitly pass a `Publisher` instance\. To generate a real-time facade, prefix the namespace of the imported class with `Facades`:$/メソッドへPublisherの実装を注入することにより、注入するpublisherをモックできるため、メソッドを簡単にメソッドを他と切り離してテストできます。しかし、`publish`メソッドを呼び出すごとに、publisherインスタンスを常に渡す必要があります。リアルタイムファサードを使用すれば、同じてスタビリティを保ちながらも、明確に`Publisher`インスタンスを渡す必要がなくなります。リアルタイムファサードを作成するには、インポートするクラスのプレフィックスとして、`Facade`名前空間を付けます。/
s/^        \/\*\*$/        \/**/
s/^         \* Publish the podcast\.$/         * ポッドキャストの公開/
s/^         \*$/         */
s/^         \* @return void$/         * @return void/
s/^         \*\/$/         *\//
s/^            $this->update(\['publishing' => now()\]);$/            $this->update(['publishing' => now()]);/
s/^When the real-time facade is used, the publisher implementation will be resolved out of the service container using the portion of the interface or class name that appears after the `Facades` prefix\. When testing, we can use Laravel's built-in facade testing helpers to mock this method call:$/リアルタイムファサードを使用しているため、インターフェイスやクラス名の`Facade`プレフィックス後の部分を使い、サービスコンテナがpublisherの実装を依存注入解決します。テストのときは、このメソッドの呼び出しをモックするために、ファサードに組み込まれているLaravelのテストヘルパが使用できます。/
s/^        \/\*\*$/        \/**/
s/^         \* A test example\.$/         * A test example./
s/^         \*$/         */
s/^         \* @return void$/         * @return void/
s/^         \*\/$/         *\//
s/^## Facade Class Reference$/## ファサードクラス一覧/
s/^Below you will find every facade and its underlying class\. This is a useful tool for quickly digging into the API documentation for a given facade root\. The \[service container binding\](\/docs\/{{version}}\/container) key is also included where applicable\.$/以下は全ファサードと実際のクラスの一覧です。これは特定のファサードを元にし、APIドキュメントを素早く探したい場合に便利な道具になります。対応する[サービスコンテナ結合キー](\/docs\/{{version}}\/container)も記載しています。/
s/^Facade  |  Class  |  Service Container Binding$/ファサード  |  クラス  |  サービスコンテナ結合/
s/^App  |  \[Illuminate\\Foundation\\Application\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Foundation\/Application\.html)  |  `app`$/App  |  [Illuminate\\Foundation\\Application](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Foundation\/Application.html)  |  `app`/
s/^Artisan  |  \[Illuminate\\Contracts\\Console\\Kernel\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Console\/Kernel\.html)  |  `artisan`$/Artisan  |  [Illuminate\\Contracts\\Console\\Kernel](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Console\/Kernel.html)  |  `artisan`/
s/^Auth  |  \[Illuminate\\Auth\\AuthManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Auth\/AuthManager\.html)  |  `auth`$/Auth  |  [Illuminate\\Auth\\AuthManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Auth\/AuthManager.html)  |  `auth`/
s/^Auth (Instance)  |  \[Illuminate\\Contracts\\Auth\\Guard\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Auth\/Guard\.html)  |  `auth\.driver`$/Auth (Instance)  |  [Illuminate\\Contracts\\Auth\\Guard](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Auth\/Guard.html)  |  `auth.driver`/
s/^Blade  |  \[Illuminate\\View\\Compilers\\BladeCompiler\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/View\/Compilers\/BladeCompiler\.html)  |  `blade\.compiler`$/Blade  |  [Illuminate\\View\\Compilers\\BladeCompiler](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/View\/Compilers\/BladeCompiler.html)  |  `blade.compiler`/
s/^Broadcast  |  \[Illuminate\\Contracts\\Broadcasting\\Factory\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Broadcasting\/Factory\.html)  |  &nbsp;$/Broadcast  |  [Illuminate\\Contracts\\Broadcasting\\Factory](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Broadcasting\/Factory.html)  |  \&nbsp;/
s/^Broadcast (Instance)  |  \[Illuminate\\Contracts\\Broadcasting\\Broadcaster\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Broadcasting\/Broadcaster\.html)  |  &nbsp;$/Broadcast (Instance)  |  [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Broadcasting\/Broadcaster.html)  |  \&nbsp;/
s/^Bus  |  \[Illuminate\\Contracts\\Bus\\Dispatcher\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Bus\/Dispatcher\.html)  |  &nbsp;$/Bus  |  [Illuminate\\Contracts\\Bus\\Dispatcher](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Bus\/Dispatcher.html)  |  \&nbsp;/
s/^Cache  |  \[Illuminate\\Cache\\CacheManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Cache\/CacheManager\.html)  |  `cache`$/Cache  |  [Illuminate\\Cache\\CacheManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Cache\/CacheManager.html)  |  `cache`/
s/^Cache (Instance)  |  \[Illuminate\\Cache\\Repository\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Cache\/Repository\.html)  |  `cache\.store`$/Cache (Instance)  |  [Illuminate\\Cache\\Repository](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Cache\/Repository.html)  |  `cache.store`/
s/^Config  |  \[Illuminate\\Config\\Repository\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Config\/Repository\.html)  |  `config`$/Config  |  [Illuminate\\Config\\Repository](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Config\/Repository.html)  |  `config`/
s/^Cookie  |  \[Illuminate\\Cookie\\CookieJar\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Cookie\/CookieJar\.html)  |  `cookie`$/Cookie  |  [Illuminate\\Cookie\\CookieJar](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Cookie\/CookieJar.html)  |  `cookie`/
s/^Crypt  |  \[Illuminate\\Encryption\\Encrypter\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Encryption\/Encrypter\.html)  |  `encrypter`$/Crypt  |  [Illuminate\\Encryption\\Encrypter](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Encryption\/Encrypter.html)  |  `encrypter`/
s/^DB  |  \[Illuminate\\Database\\DatabaseManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Database\/DatabaseManager\.html)  |  `db`$/DB  |  [Illuminate\\Database\\DatabaseManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Database\/DatabaseManager.html)  |  `db`/
s/^DB (Instance)  |  \[Illuminate\\Database\\Connection\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Database\/Connection\.html)  |  `db\.connection`$/DB (Instance)  |  [Illuminate\\Database\\Connection](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Database\/Connection.html)  |  `db.connection`/
s/^Event  |  \[Illuminate\\Events\\Dispatcher\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Events\/Dispatcher\.html)  |  `events`$/Event  |  [Illuminate\\Events\\Dispatcher](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Events\/Dispatcher.html)  |  `events`/
s/^File  |  \[Illuminate\\Filesystem\\Filesystem\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Filesystem\/Filesystem\.html)  |  `files`$/File  |  [Illuminate\\Filesystem\\Filesystem](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Filesystem\/Filesystem.html)  |  `files`/
s/^Gate  |  \[Illuminate\\Contracts\\Auth\\Access\\Gate\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Auth\/Access\/Gate\.html)  |  &nbsp;$/Gate  |  [Illuminate\\Contracts\\Auth\\Access\\Gate](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Auth\/Access\/Gate.html)  |  \&nbsp;/
s/^Hash  |  \[Illuminate\\Contracts\\Hashing\\Hasher\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Hashing\/Hasher\.html)  |  `hash`$/Hash  |  [Illuminate\\Contracts\\Hashing\\Hasher](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Hashing\/Hasher.html)  |  `hash`/
s/^Lang  |  \[Illuminate\\Translation\\Translator\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Translation\/Translator\.html)  |  `translator`$/Lang  |  [Illuminate\\Translation\\Translator](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Translation\/Translator.html)  |  `translator`/
s/^Log  |  \[Illuminate\\Log\\Logger\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Log\/Logger\.html)  |  `log`$/Log  |  [Illuminate\\Log\\Logger](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Log\/Logger.html)  |  `log`/
s/^Mail  |  \[Illuminate\\Mail\\Mailer\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Mail\/Mailer\.html)  |  `mailer`$/Mail  |  [Illuminate\\Mail\\Mailer](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Mail\/Mailer.html)  |  `mailer`/
s/^Notification  |  \[Illuminate\\Notifications\\ChannelManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Notifications\/ChannelManager\.html)  |  &nbsp;$/Notification  |  [Illuminate\\Notifications\\ChannelManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Notifications\/ChannelManager.html)  |  \&nbsp;/
s/^Password  |  \[Illuminate\\Auth\\Passwords\\PasswordBrokerManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Auth\/Passwords\/PasswordBrokerManager\.html)  |  `auth\.password`$/Password  |  [Illuminate\\Auth\\Passwords\\PasswordBrokerManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Auth\/Passwords\/PasswordBrokerManager.html)  |  `auth.password`/
s/^Password (Instance)  |  \[Illuminate\\Auth\\Passwords\\PasswordBroker\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Auth\/Passwords\/PasswordBroker\.html)  |  `auth\.password\.broker`$/Password (Instance)  |  [Illuminate\\Auth\\Passwords\\PasswordBroker](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Auth\/Passwords\/PasswordBroker.html)  |  `auth.password.broker`/
s/^Queue  |  \[Illuminate\\Queue\\QueueManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Queue\/QueueManager\.html)  |  `queue`$/Queue  |  [Illuminate\\Queue\\QueueManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Queue\/QueueManager.html)  |  `queue`/
s/^Queue (Instance)  |  \[Illuminate\\Contracts\\Queue\\Queue\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Queue\/Queue\.html)  |  `queue\.connection`$/Queue (Instance)  |  [Illuminate\\Contracts\\Queue\\Queue](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Queue\/Queue.html)  |  `queue.connection`/
s/^Queue (Base Class)  |  \[Illuminate\\Queue\\Queue\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Queue\/Queue\.html)  |  &nbsp;$/Queue (Base Class)  |  [Illuminate\\Queue\\Queue](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Queue\/Queue.html)  |  \&nbsp;/
s/^Redirect  |  \[Illuminate\\Routing\\Redirector\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Routing\/Redirector\.html)  |  `redirect`$/Redirect  |  [Illuminate\\Routing\\Redirector](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Routing\/Redirector.html)  |  `redirect`/
s/^Redis  |  \[Illuminate\\Redis\\RedisManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Redis\/RedisManager\.html)  |  `redis`$/Redis  |  [Illuminate\\Redis\\RedisManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Redis\/RedisManager.html)  |  `redis`/
s/^Redis (Instance)  |  \[Illuminate\\Redis\\Connections\\Connection\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Redis\/Connections\/Connection\.html)  |  `redis\.connection`$/Redis (Instance)  |  [Illuminate\\Redis\\Connections\\Connection](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Redis\/Connections\/Connection.html)  |  `redis.connection`/
s/^Request  |  \[Illuminate\\Http\\Request\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Http\/Request\.html)  |  `request`$/Request  |  [Illuminate\\Http\\Request](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Http\/Request.html)  |  `request`/
s/^Response  |  \[Illuminate\\Contracts\\Routing\\ResponseFactory\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Routing\/ResponseFactory\.html)  |  &nbsp;$/Response  |  [Illuminate\\Contracts\\Routing\\ResponseFactory](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Routing\/ResponseFactory.html)  |  \&nbsp;/
s/^Response (Instance)  |  \[Illuminate\\Http\\Response\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Http\/Response\.html)  |  &nbsp;$/Response (Instance)  |  [Illuminate\\Http\\Response](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Http\/Response.html)  |  \&nbsp;/
s/^Route  |  \[Illuminate\\Routing\\Router\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Routing\/Router\.html)  |  `router`$/Route  |  [Illuminate\\Routing\\Router](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Routing\/Router.html)  |  `router`/
s/^Schema  |  \[Illuminate\\Database\\Schema\\Builder\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Database\/Schema\/Builder\.html)  |  &nbsp;$/Schema  |  [Illuminate\\Database\\Schema\\Builder](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Database\/Schema\/Builder.html)  |  \&nbsp;/
s/^Session  |  \[Illuminate\\Session\\SessionManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Session\/SessionManager\.html)  |  `session`$/Session  |  [Illuminate\\Session\\SessionManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Session\/SessionManager.html)  |  `session`/
s/^Session (Instance)  |  \[Illuminate\\Session\\Store\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Session\/Store\.html)  |  `session\.store`$/Session (Instance)  |  [Illuminate\\Session\\Store](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Session\/Store.html)  |  `session.store`/
s/^Storage  |  \[Illuminate\\Filesystem\\FilesystemManager\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Filesystem\/FilesystemManager\.html)  |  `filesystem`$/Storage  |  [Illuminate\\Filesystem\\FilesystemManager](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Filesystem\/FilesystemManager.html)  |  `filesystem`/
s/^Storage (Instance)  |  \[Illuminate\\Contracts\\Filesystem\\Filesystem\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Contracts\/Filesystem\/Filesystem\.html)  |  `filesystem\.disk`$/Storage (Instance)  |  [Illuminate\\Contracts\\Filesystem\\Filesystem](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Contracts\/Filesystem\/Filesystem.html)  |  `filesystem.disk`/
s/^URL  |  \[Illuminate\\Routing\\UrlGenerator\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Routing\/UrlGenerator\.html)  |  `url`$/URL  |  [Illuminate\\Routing\\UrlGenerator](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Routing\/UrlGenerator.html)  |  `url`/
s/^Validator  |  \[Illuminate\\Validation\\Factory\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Validation\/Factory\.html)  |  `validator`$/Validator  |  [Illuminate\\Validation\\Factory](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Validation\/Factory.html)  |  `validator`/
s/^Validator (Instance)  |  \[Illuminate\\Validation\\Validator\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/Validation\/Validator\.html)  |  &nbsp;$/Validator (Instance)  |  [Illuminate\\Validation\\Validator](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/Validation\/Validator.html)  |  \&nbsp;/
s/^View  |  \[Illuminate\\View\\Factory\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/View\/Factory\.html)  |  `view`$/View  |  [Illuminate\\View\\Factory](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/View\/Factory.html)  |  `view`/
s/^View (Instance)  |  \[Illuminate\\View\\View\](https:\/\/laravel\.com\/api\/{{version}}\/Illuminate\/View\/View\.html)  |  &nbsp;$/View (Instance)  |  [Illuminate\\View\\View](https:\/\/laravel.com\/api\/{{version}}\/Illuminate\/View\/View.html)  |  \&nbsp;/
