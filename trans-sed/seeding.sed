s/^# Database: Seeding$/# データベース：シーディング/
s/^- \[Introduction\](#introduction)$/- [イントロダクション](#introduction)/
s/^- \[Writing Seeders\](#writing-seeders)$/- [シーダクラス定義](#writing-seeders)/
s/^    - \[Using Model Factories\](#using-model-factories)$/    - [モデルファクトリの使用](#using-model-factories)/
s/^    - \[Calling Additional Seeders\](#calling-additional-seeders)$/    - [追加のシーダ呼び出し](#calling-additional-seeders)/
s/^- \[Running Seeders\](#running-seeders)$/- [シーダの実行](#running-seeders)/
s/^## Introduction$/## イントロダクション/
s/^Laravel includes a simple method of seeding your database with test data using seed classes\. All seed classes are stored in the `database\/seeds` directory\. Seed classes may have any name you wish, but probably should follow some sensible convention, such as `UsersTableSeeder`, etc\. By default, a `DatabaseSeeder` class is defined for you\. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order\.$/シーダ（初期値設定）クラスを使用し、テストデーターをデーターベースに設定するシンプルな方法もLaravelには備わっています。全シーダクラスは`database\/seeds`に保存します。シーダクラスには好きな名前を付けられます。しかし`UsersTableSeeder`などのような分かりやすい規則に従ったほうが良いでしょう。デフォルトとして`DatabaseSeeder`クラスが定義されています。このクラスから`call`メソッドを使い他の初期値設定クラスを呼び出すことで、シーディングの順番をコントロールできます。/
s/^## Writing Seeders$/## シーダクラス定義/
s/^To generate a seeder, execute the `make:seeder` \[Artisan command\](\/docs\/{{version}}\/artisan)\. All seeders generated by the framework will be placed in the `database\/seeds` directory:$/シーダーを生成するには、`make:seeder` [Artisanコマンド](\/docs\/{{version}}\/artisan)を実行します。フレームワークが生成するシーダーは全て`database\/seeds`ディレクトリに設置されます。/
s/^A seeder class only contains one method by default: `run`\. This method is called when the `db:seed` \[Artisan command\](\/docs\/{{version}}\/artisan) is executed\. Within the `run` method, you may insert data into your database however you wish\. You may use the \[query builder\](\/docs\/{{version}}\/queries) to manually insert data or you may use \[Eloquent model factories\](\/docs\/{{version}}\/database-testing#writing-factories)\.$/シーダクラスはデフォルトで`run`メソッドだけを含んでいます。このメソッドは`db:seed` [Artisanコマンド](\/docs\/{{version}}\/artisan)が実行された時に呼びだされます。`run`メソッドの中でデータベースに何でも好きなデーターを挿入できます。[クエリビルダ](\/docs\/{{version}}\/queries)でデータを挿入することも、もしくは[Eloquentモデルファクトリ](\/docs\/{{version}}\/database-testing#writing-factories)を使うこともできます。/
s/^> {tip} \[Mass assignment protection\](\/docs\/{{version}}\/eloquent#mass-assignment) is automatically disabled during database seeding\.$/> {tip} データベースシーディング時、[複数代入](\/docs\/{{version}}\/eloquent#mass-assignment)は自動的に無効になります。/
s/^As an example, let's modify the default `DatabaseSeeder` class and add a database insert statement to the `run` method:$/例として、Laravelのインストール時にデフォルトで用意されている`DatabaseSeeder`クラスを変更してみましょう。`run`メソッドにデータベースINSERT文を追加します。/
s/^        \/\*\*$/        \/**/
s/^         \* Run the database seeds\.$/         * データベース初期値設定の実行/
s/^         \*$/         */
s/^         \* @return void$/         * @return void/
s/^         \*\/$/         *\//
s/^            DB::table('users')->insert(\[$/            DB::table('users')->insert([/
s/^                'email' => str_random(10)\.'@gmail\.com',$/                'email' => str_random(10).'@gmail.com',/
s/^            \]);$/            ]);/
s/^> {tip} You may type-hint any dependencies you need within the `run` method's signature\. They will automatically be resolved via the Laravel \[service container\](\/docs\/{{version}}\/container)\.$/> {tip} `run`メソッドの引数として、タイプヒントにより必要な依存を指定できます。それらはLaravelの[サービスコンテナ](\/docs\/{{version}}\/container)により、自動的に依存解決されます。/
s/^### Using Model Factories$/### モデルファクトリの利用/
s/^Of course, manually specifying the attributes for each model seed is cumbersome\. Instead, you can use \[model factories\](\/docs\/{{version}}\/database-testing#writing-factories) to conveniently generate large amounts of database records\. First, review the \[model factory documentation\](\/docs\/{{version}}\/database-testing#writing-factories) to learn how to define your factories\. Once you have defined your factories, you may use the `factory` helper function to insert records into your database\.$/もちろんそれぞれのモデルシーダで属性をいちいち指定するのは面倒です。代わりに大量のデータベースレコードを生成するのに便利な[モデルファクトリ](\/docs\/{{version}}\/database-testing#writing-factories)が使用できます。最初に[モデルファクトリのドキュメント](\/docs\/{{version}}\/database-testing#writing-factories)を読んで、どのように定義するのかを学んでください。ファクトリが定義できれば、データベースにレコードを挿入する`factory`ヘルパ関数が利用できます。/
s/^For example, let's create 50 users and attach a relationship to each user:$/例として50件のレコードを生成し、それぞれのユーザーへリレーションを付加してみましょう。/
s/^    \/\*\*$/    \/**/
s/^     \* Run the database seeds\.$/     * データベース初期値設定の実行/
s/^     \*$/     */
s/^     \* @return void$/     * @return void/
s/^     \*\/$/     *\//
s/^### Calling Additional Seeders$/### 追加のシーダ呼び出し/
s/^Within the `DatabaseSeeder` class, you may use the `call` method to execute additional seed classes\. Using the `call` method allows you to break up your database seeding into multiple files so that no single seeder class becomes overwhelmingly large\. Pass the name of the seeder class you wish to run:$/`DatabaseSeeder`クラスの中で追加のシーダクラスを呼び出す`call`メソッドが使えます。`call`メソッドを使うことで、圧倒されるぐらい大きな１ファイルを使う代わりに、データベースシーディングを複数のファイルへ分割できます。実行したいシーダクラス名を渡します。/
s/^    \/\*\*$/    \/**/
s/^     \* Run the database seeds\.$/     * データベース初期値設定の実行/
s/^     \*$/     */
s/^     \* @return void$/     * @return void/
s/^     \*\/$/     *\//
s/^        $this->call(\[$/        $this->call([/
s/^        \]);$/        ]);/
s/^## Running Seeders$/## シーダの実行/
s/^Once you have written your seeder, you may need to regenerate Composer's autoloader using the `dump-autoload` command:$/シーダクラスを書き上げたら、Composerのオートローダを再生成するために、`dump-autoload`コマンドを実行する必要があります。/
s/^Now you may use the `db:seed` Artisan command to seed your database\. By default, the `db:seed` command runs the `DatabaseSeeder` class, which may be used to call other seed classes\. However, you may use the `--class` option to specify a specific seeder class to run individually:$/データベースへ初期値を設定するために`db:seed` Artisanコマンドを使用します。デフォルトで`db:seed`コマンドは、他のシーダクラスを呼び出す`DatabaseSeeder`クラスを実行します。しかし特定のファイルを個別に実行したい場合は、`--class`オプションを使いシーダを指定してください。/
s/^You may also seed your database using the `migrate:refresh` command, which will also rollback and re-run all of your migrations\. This command is useful for completely re-building your database:$/もしくはマイグレーションをロールバックし再実行する`migrate:refresh`コマンドを使っても、データベースに初期値を設定できます。このコマンドはデータベースを完全に作成し直したい場合に便利です。/
