s/^# Directory Structure$/# ディレクトリ構造/
s/^- \[Introduction\](#introduction)$/- [イントロダクション](#introduction)/
s/^- \[The Root Directory\](#the-root-directory)$/- [プロジェクトディレクトリ](#the-root-directory)/
s/^    - \[The `app` Directory\](#the-root-app-directory)$/    - [appディレクトリ](#the-root-app-directory)/
s/^    - \[The `bootstrap` Directory\](#the-bootstrap-directory)$/    - [bootstrapディレクトリ](#the-bootstrap-directory)/
s/^    - \[The `config` Directory\](#the-config-directory)$/    - [configディレクトリ](#the-config-directory)/
s/^    - \[The `database` Directory\](#the-database-directory)$/    - [databaseディレクトリ](#the-database-directory)/
s/^    - \[The `public` Directory\](#the-public-directory)$/    - [publicディレクトリ](#the-public-directory)/
s/^    - \[The `resources` Directory\](#the-resources-directory)$/    - [resourcesディレクトリ](#the-resources-directory)/
s/^    - \[The `routes` Directory\](#the-routes-directory)$/    - [routesディレクトリ](#the-routes-directory)/
s/^    - \[The `storage` Directory\](#the-storage-directory)$/    - [storageディレクトリ](#the-storage-directory)/
s/^    - \[The `tests` Directory\](#the-tests-directory)$/    - [testsディレクトリ](#the-tests-directory)/
s/^    - \[The `vendor` Directory\](#the-vendor-directory)$/    - [vendorディレクトリ](#the-vendor-directory)/
s/^- \[The App Directory\](#the-app-directory)$/- [Appディレクトリ](#the-app-directory)/
s/^    - \[The `Broadcasting` Directory\](#the-broadcasting-directory)$/    - [Broadcastingディレクトリ](#the-broadcasting-directory)/
s/^    - \[The `Console` Directory\](#the-console-directory)$/    - [Consoleディレクトリ](#the-console-directory)/
s/^    - \[The `Events` Directory\](#the-events-directory)$/    - [Eventsディレクトリ](#the-events-directory)/
s/^    - \[The `Exceptions` Directory\](#the-exceptions-directory)$/    - [Exceptionsディレクトリ](#the-exceptions-directory)/
s/^    - \[The `Http` Directory\](#the-http-directory)$/    - [Httpディレクトリ](#the-http-directory)/
s/^    - \[The `Jobs` Directory\](#the-jobs-directory)$/    - [Jobsディレクトリ](#the-jobs-directory)/
s/^    - \[The `Listeners` Directory\](#the-listeners-directory)$/    - [Listenersディレクトリ](#the-listeners-directory)/
s/^    - \[The `Mail` Directory\](#the-mail-directory)$/    - [Mailディレクトリ](#the-mail-directory)/
s/^    - \[The `Notifications` Directory\](#the-notifications-directory)$/    - [Notificationsディレクトリ](#the-notifications-directory)/
s/^    - \[The `Policies` Directory\](#the-policies-directory)$/    - [Policiesディレクトリ](#the-policies-directory)/
s/^    - \[The `Providers` Directory\](#the-providers-directory)$/    - [Providersディレクトリ](#the-providers-directory)/
s/^    - \[The `Rules` Directory\](#the-rules-directory)$/    - [Rulesディレクトリ](#the-rules-directory)/
s/^## Introduction$/## イントロダクション/
s/^The default Laravel application structure is intended to provide a great starting point for both large and small applications\. Of course, you are free to organize your application however you like\. Laravel imposes almost no restrictions on where any given class is located - as long as Composer can autoload the class\.$/Laravelのデフォルトアプリケーション構造はアプリケーションの大小にかかわらず、素晴らしいスタートを切ってもらえることを意図しています。もちろんアプリケーションは皆さんのお好みに応じ、自由に体系立ててください。クラスがComposerによりオートローディングできるならば、Laravelはクラスをどこに配置するか強制することはまずありません。/
s/^#### Where Is The Models Directory?$/#### modelsディレクトリはどこにある？/
s/^When getting started with Laravel, many developers are confused by the lack of a `models` directory\. However, the lack of such a directory is intentional\. We find the word "models" ambiguous since it means many different things to many different people\. Some developers refer to an application's "model" as the totality of all of its business logic, while others refer to "models" as classes that interact with a relational database\.$/Laravelを学習し始めるとき、多くの開発者は`models`ディレクトリが存在しないことに戸惑います。しかし、意図的にこのディレクトリを用意していません。多くの別々の人達にとって、その意味合いは様々なため、"models"という言葉の定義は曖昧であることに私達は気づきました。ある開発者たちはすべてのビジネスロジックを総称してアプリケーションの「モデル」と呼び、一方で別の人達はリレーショナルデータベースに関連するクラスを「モデル」として参照しています。/
s/^For this reason, we choose to place Eloquent models in the `app` directory by default, and allow the developer to place them somewhere else if they choose\.$/このため、私達はEloquentモデルをデフォルトでは`app`ディレクトリ下へ設置することを選択し、開発者自分が選んだどこか別の場所へ設置してもらうことにしました。/
s/^## The Root Directory$/## プロジェクトディレクトリ/
s/^#### The App Directory$/#### appディレクトリ/
s/^The `app` directory, as you might expect, contains the core code of your application\. We'll explore this directory in more detail soon; however, almost all of the classes in your application will be in this directory\.$/`app`ディレクトリは名前の示すとおり、アプリケーションのコアコードを配置します。このフォルダの詳細は、このあとに説明します。しかし、アプリケーションのほとんど全部のクラスは、このディレクトリの中に設定されることを覚えておいてください。/
s/^#### The Bootstrap Directory$/#### bootstrapディレクトリ/
s/^The `bootstrap` directory contains the `app\.php` file which bootstraps the framework\. This directory also houses a `cache` directory which contains framework generated files for performance optimization such as the route and services cache files\.$/`bootstrap`フォルダは、フレームワークの初期処理を行う`app.php`ファイルを含んでいます。その中の`cache`ディレクトリは、初期処理のパフォーマンスを最適化するため、フレームワークが生成するルートやサービスのキャッシュファイルが保存されるフォルダです。/
s/^#### The Config Directory$/#### configディレクトリ/
s/^The `config` directory, as the name implies, contains all of your application's configuration files\. It's a great idea to read through all of these files and familiarize yourself with all of the options available to you\.$/`config`ディレクトリは名前が示す通り、アプリケーションの全設定ファイルが設置されています。全ファイルに目を通し、設定可能なオプションに慣れ親しんでおくのは良い考えでしょう。/
s/^#### The Database Directory$/#### databaseディレクトリ/
s/^The `database` directory contains your database migrations, model factories, and seeds\. If you wish, you may also use this directory to hold an SQLite database\.$/`database`フォルダはデータベースのマイグレーションとモデルファクトリ、初期値設定（シーディング）を配置します。ご希望であれば、このファイルをSQLiteデータベースの設置場所としても利用できます。/
s/^#### The Public Directory$/#### publicディレクトリ/
s/^The `public` directory contains the `index\.php` file, which is the entry point for all requests entering your application and configures autoloading\. This directory also houses your assets such as images, JavaScript, and CSS\.$/`public`ディレクトリには、アプリケーションへの全リクエストの入り口となり、オートローディングを設定する`index.php`ファイルがあります。また、このディレクトリにはアセット（画像、JavaScript、CSSなど）を配置します。/
s/^#### The Resources Directory$/#### resourcesディレクトリ/
s/^The `resources` directory contains your views as well as your raw, un-compiled assets such as LESS, SASS, or JavaScript\. This directory also houses all of your language files\.$/`resources`ディレクトリはビューやアセットの元ファイル（LESS、SASS、JavaScript）で構成されています。また、すべての言語ファイルも配置します。/
s/^#### The Routes Directory$/#### routesディレクトリ/
s/^The `routes` directory contains all of the route definitions for your application\. By default, several route files are included with Laravel: `web\.php`, `api\.php`, `console\.php` and `channels\.php`\.$/ディレクトリはアプリケーションの全ルート定義により構成されています。デフォルトでは、`web.php`、`api.php`、`console.php`、`channels.php`ファイルが含まれています。/
s/^The `web\.php` file contains routes that the `RouteServiceProvider` places in the `web` middleware group, which provides session state, CSRF protection, and cookie encryption\. If your application does not offer a stateless, RESTful API, all of your routes will most likely be defined in the `web\.php` file\.$/`web.php`ファイルは、`RouteServiceProvider`の`web`ミドルウェアグループに属するルートで構成します。このミドルウェアは、セッションステート、CSRF保護、クッキーの暗号化機能を提供しています。もしアプリケーションがステートレスではなく、RESTフルなAPIを提供しないのであれば、すべてのルートは`web.php`ファイルの中で定義されることになるでしょう。/
s/^The `api\.php` file contains routes that the `RouteServiceProvider` places in the `api` middleware group, which provides rate limiting\. These routes are intended to be stateless, so requests entering the application through these routes are intended to be authenticated via tokens and will not have access to session state\.$/`api.php`ファイルは、`RouteServiceProvider`の`api`ミドルウェアグループに属するルートで構成します。このミドルウェアはアクセス回数制限を提供しています。このファイル中で定義されるルートは、ステートレスであることを意図しています。つまり、これらのルートを通るアプリケーションに対するリクエストは、セッションステートにアクセスする必要がないように、トークンを使って認証されることを意図しています。/
s/^The `console\.php` file is where you may define all of your Closure based console commands\. Each Closure is bound to a command instance allowing a simple approach to interacting with each command's IO methods\. Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application\.$/`console.php`ファイルは、クロージャベースの全コンソールコマンドを定義する場所です。それぞれのコマンドのIOメソッドと連携するシンプルなアプローチを提供するコマンドインスタンスと、各クロージャは結合します。厳密に言えば、このファイルはHTTPルートは定義していないのですが、コンソールベースのエントリポイントを定義しているという点で、ルート定義なのです。/
s/^The `channels\.php` file is where you may register all of the event broadcasting channels that your application supports\.$/`channels.php`ファイルはアプリケーションでサポートする、全ブロードキャストチャンネルを登録する場所です。/
s/^#### The Storage Directory$/#### storageディレクトリ/
s/^The `storage` directory contains your compiled Blade templates, file based sessions, file caches, and other files generated by the framework\. This directory is segregated into `app`, `framework`, and `logs` directories\. The `app` directory may be used to store any files generated by your application\. The `framework` directory is used to store framework generated files and caches\. Finally, the `logs` directory contains your application's log files\.$/`storage`ディレクトリにはコンパイルされたBladeテンプレート、ファイルベースのセッション、ファイルキャッシュなど、フレームワークにより生成されるファイルが保存されます。このフォルダは`app`、`framework`、`logs`ディレクトリに分かれています。`app`ディレクトリはアプリケーションにより生成されるファイルを保存するために利用します。`framework`ディレクトリはフレームワークが生成するファイルやキャッシュに利用されます。最後の`logs`ディレクトリはアプリケーションのログファイルが保存されます。/
s/^The `storage\/app\/public` directory may be used to store user-generated files, such as profile avatars, that should be publicly accessible\. You should create a symbolic link at `public\/storage` which points to this directory\. You may create the link using the `php artisan storage:link` command\.$/`storage\/app\/public`ディレクトリにはプロファイルのアバターなどのようなユーザーにより生成され、外部からアクセスされるファイルが保存されます。`public\/storage`がこのディレクトリを指すように、シンボリックリンクを張る必要があります。リンクは、`php artisan storage:link`コマンドを使い生成できます。/
s/^#### The Tests Directory$/#### testsディレクトリ/
s/^The `tests` directory contains your automated tests\. An example \[PHPUnit\](https:\/\/phpunit\.de\/) is provided out of the box\. Each test class should be suffixed with the word `Test`\. You may run your tests using the `phpunit` or `php vendor\/bin\/phpunit` commands\.$/`tests`ディレクトリには皆さんの自動テストを配置します。サンプルの[PHPUnit](https:\/\/phpunit.de\/)テストが最初に含まれています。各テストクラスはサフィックスとして`Test`を付ける必要があります。テストは`phpunit`か、`php vendor\/bin\/phpunit`コマンドにより実行できます。/
s/^#### The Vendor Directory$/#### vendorディレクトリ/
s/^The `vendor` directory contains your \[Composer\](https:\/\/getcomposer\.org) dependencies\.$/`vendor`ディレクトリには、[Composer](https:\/\/getcomposer.org)による依存パッケージが配置されます。/
s/^## The App Directory$/## appディレクトリ/
s/^The majority of your application is housed in the `app` directory\. By default, this directory is namespaced under `App` and is autoloaded by Composer using the \[PSR-4 autoloading standard\](http:\/\/www\.php-fig\.org\/psr\/psr-4\/)\.$/アプリケーションの主要な部分は、`app`ディレクトリ内に配置します。このディレクトリはデフォルトで、`App`名前空間のもとに置かれており、[PSR-4オートローディング規約](http:\/\/www.php-fig.org\/psr\/psr-4\/)を使い、Composerがオートロードしています。/
s/^The `app` directory contains a variety of additional directories such as `Console`, `Http`, and `Providers`\. Think of the `Console` and `Http` directories as providing an API into the core of your application\. The HTTP protocol and CLI are both mechanisms to interact with your application, but do not actually contain application logic\. In other words, they are two ways of issuing commands to your application\. The `Console` directory contains all of your Artisan commands, while the `Http` directory contains your controllers, middleware, and requests\.$/`app`ディレクトリは多様なサブディレクトリを持っています。`Console`、`Http`、`Providers`などです。`Console`と`Http`ディレクトリは、アプリケーションの「コア」へAPIを提供していると考えてください。HTTPプロトコルとCLIは両方共にアプリケーションと相互に関係するメカニズムですが、実際のアプリケーションロジックではありません。言い換えれば、これらはアプリケーションに指示を出す、２つの方法に過ぎません。`Console`ディレクトリは全Artisanコマンドで構成され、一方の`Http`ディレクトリはコントローラやフィルター、リクエストにより構成されています。/
s/^A variety of other directories will be generated inside the `app` directory as you use the `make` Artisan commands to generate classes\. So, for example, the `app\/Jobs` directory will not exist until you execute the `make:job` Artisan command to generate a job class\.$/クラス生成のための`make` Artisanコマンドを使用することで、様々なディレクトリが`app`ディレクトリ内に作成されます。たとえば、`app\/Jobs`ディレクトリは、ジョブクラスを生成する`make:job` Artisanコマンドを実行するまで存在していません。/
s/^> {tip} Many of the classes in the `app` directory can be generated by Artisan via commands\. To review the available commands, run the `php artisan list make` command in your terminal\.$/> {tip} Artisanコマンドにより、`app`ディレクトリ下にたくさんのクラスが生成されます。使用可能なコマンドを確認するには、`php artisan list make`コマンドをターミナルで実行してください。/
s/^#### The Broadcasting Directory$/#### Broadcastingディレクトリ/
s/^The `Broadcasting` directory contains all of the broadcast channel classes for your application\. These classes are generated using the `make:channel` command\. This directory does not exist by default, but will be created for you when you create your first channel\. To learn more about channels, check out the documentation on \[event broadcasting\](\/docs\/{{version}}\/broadcasting)\.$/`Broadcasting`ディレクトリは、アプリケーションの全ブロードキャストチャンネルクラスで構成します。これらのクラスは、`make:channel`コマンドで生成されます。このディレクトリはデフォルトでは存在しませんが、最初にチャンネルを生成したときに作成されます。チャンネルについての詳細は、[イベントブロードキャスト](\/docs\/{{version}}\/broadcasting)のドキュメントで確認してください。/
s/^#### The Console Directory$/#### Consoleディレクトリ/
s/^The `Console` directory contains all of the custom Artisan commands for your application\. These commands may be generated using the `make:command` command\. This directory also houses your console kernel, which is where your custom Artisan commands are registered and your \[scheduled tasks\](\/docs\/{{version}}\/scheduling) are defined\.$/`Console`ディレクトリは、アプリケーションの全カスタムArtisanコマンドで構成します。これらのコマンドクラスは`make:command`コマンドにより生成されます。コンソールカーネルもこのディレクトリ内にあり、カスタムArtisanコマンドや、[タスクのスケジュール](\/docs\/{{version}}\/scheduling)を登録します。/
s/^#### The Events Directory$/#### Eventsディレクトリ/
s/^This directory does not exist by default, but will be created for you by the `event:generate` and `make:event` Artisan commands\. The `Events` directory, as you might expect, houses \[event classes\](\/docs\/{{version}}\/events)\. Events may be used to alert other parts of your application that a given action has occurred, providing a great deal of flexibility and decoupling\.$/このディレクトリはデフォルトで存在していません。`event:generate`か`make:event` Artisanコマンド実行時に作成されます。`Events`ディレクトリは名前の通り、[イベントクラス](\/docs\/{{version}}\/events)を設置する場所です。イベントは特定のアクションが起きたことをアプリケーションの別の部分に知らせるために使われ、柔軟性と分離性を提供しています。/
s/^#### The Exceptions Directory$/#### Exceptionsディレクトリ/
s/^The `Exceptions` directory contains your application's exception handler and is also a good place to place any exceptions thrown by your application\. If you would like to customize how your exceptions are logged or rendered, you should modify the `Handler` class in this directory\.$/`Exceptions`ディレクトリはアプリケーションの例外ハンドラで構成します。また、アプリケーションから投げる例外を用意するにも適した場所でしょう。例外のログやレンダー方法をカスタマイズしたい場合は、このディレクトリの`Handler`クラスを修正してください。/
s/^#### The Http Directory$/#### Httpディレクトリ/
s/^The `Http` directory contains your controllers, middleware, and form requests\. Almost all of the logic to handle requests entering your application will be placed in this directory\.$/`Http`ディレクトリはコントローラ、ミドルウェア、フォームリクエストを設置します。アプリケーションへのリクエストを処理するロジックは、ほぼ全てこのディレクトリ内に設置します。/
s/^#### The Jobs Directory$/#### Jobsディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `make:job` Artisan command\. The `Jobs` directory houses the \[queueable jobs\](\/docs\/{{version}}\/queues) for your application\. Jobs may be queued by your application or run synchronously within the current request lifecycle\. Jobs that run synchronously during the current request are sometimes referred to as "commands" since they are an implementation of the \[command pattern\](https:\/\/en\.wikipedia\.org\/wiki\/Command_pattern)\.$/このディレクトリはデフォルトで存在していません。`make:job` Artisanコマンドを実行すると作成されます。`Jobs`ディレクトリはアプリケーションの[キュー投入可能なジョブ](\/docs\/{{version}}\/queues)を置いておく場所です。`Jobs`はアプリケーションによりキューに投入されるか、もしくは現在のリクエストサイクル中に同期的に実行されます。現在のリクエストサイクル中に同期的に実行するジョブは、[コマンドパターン](https:\/\/en.wikipedia.org\/wiki\/Command_pattern)を実装しているため、時に「コマンド」と呼ばれることがあります。/
s/^#### The Listeners Directory$/#### Listenersディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `event:generate` or `make:listener` Artisan commands\. The `Listeners` directory contains the classes that handle your \[events\](\/docs\/{{version}}\/events)\. Event listeners receive an event instance and perform logic in response to the event being fired\. For example, a `UserRegistered` event might be handled by a `SendWelcomeEmail` listener\.$/このディレクトリはデフォルトで存在していません。`event:generate`か`make:listener` Artisanコマンドを実行すると、作成されます。`Listeners`ディレクトリには、[events](\/docs\/{{version}}\/events)イベントを処理するクラスを設置します。イベントリスナはイベントインスタンスを受け取り、発行されたイベントへ対応するロジックを実行します。たとえば、`UserRegistered`（ユーザー登録）イベントは、`SendWelcomeEmail`（ウェルカムメール送信）リスナにより処理されることになるでしょう。/
s/^#### The Mail Directory$/#### Mailディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `make:mail` Artisan command\. The `Mail` directory contains all of your classes that represent emails sent by your application\. Mail objects allow you to encapsulate all of the logic of building an email in a single, simple class that may be sent using the `Mail::send` method\.$/このディレクトリはデフォルトでは存在していません。`make:mail` Artisanコマンドを実行すると、作成されます。`Mail`ディレクトリは、アプリケーションから送信されるメールを表す全クラスで構成します。メールオブジェクトにより、`Mail::send`メソッドを使用して送られるメールを組み立てるロジックをすべて、１つのシンプルなクラスへカプセル化できます。/
s/^#### The Notifications Directory$/#### Notificationsディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `make:notification` Artisan command\. The `Notifications` directory contains all of the "transactional" notifications that are sent by your application, such as simple notifications about events that happen within your application\. Laravel's notification features abstracts sending notifications over a variety of drivers such as email, Slack, SMS, or stored in a database\.$/このディレクトリはデフォルトでは存在していません。`make:notification` Artisanコマンドを実行すると作成されます。`Notifications`ディレクトリは、アプリケーションから送られる全「業務上」の通知、たとえばアプリケーションの中でイベントが発生したことを知らせるシンプルな通知などで構成します。Laravelの通知機能は、メール、Slack、SMS、データベースへの保存などのように、様々なドライバに対する通知の送信を抽象化しています。/
s/^#### The Policies Directory$/#### Policiesディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `make:policy` Artisan command\. The `Policies` directory contains the authorization policy classes for your application\. Policies are used to determine if a user can perform a given action against a resource\. For more information, check out the \[authorization documentation\](\/docs\/{{version}}\/authorization)\.$/このディレクトリはデフォルトでは存在していません。`make:policy` Artisanコマンドを実行すると、作成されます。`Policies`ディレクトリにはアプリケーションの認可ポリシークラスを設置します。ポリシーは、リソースに対し指定したアクションをユーザーが実行できるかを決定します。詳細は、[認可のドキュメント](\/docs\/{{version}}\/authorization)をご覧ください。/
s/^#### The Providers Directory$/#### Providersディレクトリ/
s/^The `Providers` directory contains all of the \[service providers\](\/docs\/{{version}}\/providers) for your application\. Service providers bootstrap your application by binding services in the service container, registering events, or performing any other tasks to prepare your application for incoming requests\.$/`Providers`ディレクトリは、アプリケーションの全[サービスプロバイダ](\/docs\/{{version}}\/providers)により構成します。サービスプロバイダは、サービスをコンテナと結合、イベントの登録、もしくはアプリケーションへやってくるリクエストを処理するために必要な用意をするタスクを実行するなど、アプリケーションの事前準備を行います。/
s/^In a fresh Laravel application, this directory will already contain several providers\. You are free to add your own providers to this directory as needed\.$/インストール直後のアプリケーションでも、このディレクトリは多くのプロパイダーを含んでいます。必要に応じて、自分のプロバイダを自由に追加してください。/
s/^#### The Rules Directory$/#### Rulesディレクトリ/
s/^This directory does not exist by default, but will be created for you if you execute the `make:rule` Artisan command\. The `Rules` directory contains the custom validation rule objects for your application\. Rules are used to encapsulate complicated validation logic in a simple object\. For more information, check out the \[validation documentation\](\/docs\/{{version}}\/validation)\.$/このディレクトリは、デフォルトでは存在していません。`make:rule` Artisanコマンドを実行すると、作成されます。`Rules`ディレクトリは、アプリケーションで使用するバリデーションルールオブジェクトで構成します。ルールは複雑なバリデーションロジックをシンプルなオブジェクトへカプセル化するために使用します。詳細は、[バリデーションのドキュメント](\/docs\/{{version}}\/validation)で確認してください。/
