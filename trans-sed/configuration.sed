s/^# Configuration$/# 設定/
s/^- \[Introduction\](#introduction)$/- [イントロダクション](#introduction)/
s/^- \[Environment Configuration\](#environment-configuration)$/- [環境設定](#environment-configuration)/
s/^    - \[Environment Variable Types\](#environment-variable-types)$/    - [環境変数タイプ](#environment-variable-types)/
s/^    - \[Retrieving Environment Configuration\](#retrieving-environment-configuration)$/    - [環境設定の取得](#retrieving-environment-configuration)/
s/^    - \[Determining The Current Environment\](#determining-the-current-environment)$/    - [現在環境の決定](#determining-the-current-environment)/
s/^- \[Accessing Configuration Values\](#accessing-configuration-values)$/- [設定値へのアクセス](#accessing-configuration-values)/
s/^- \[Configuration Caching\](#configuration-caching)$/- [設定キャッシュ](#configuration-caching)/
s/^- \[Maintenance Mode\](#maintenance-mode)$/- [メンテナンスモード](#maintenance-mode)/
s/^## Introduction$/## イントロダクション/
s/^All of the configuration files for the Laravel framework are stored in the `config` directory\. Each option is documented, so feel free to look through the files and get familiar with the options available to you\.$/Laravelフレームワークの全設定ファイルは、`config`ディレクトリに保存されています。各オプションには詳しいコメントが付いているので、各ファイルを一読し、使用できるオプションを把握しておきましょう。/
s/^## Environment Configuration$/## 環境設定/
s/^It is often helpful to have different configuration values based on the environment where the application is running\. For example, you may wish to use a different cache driver locally than you do on your production server\.$/アプリケーションを実行している環境にもとづき、別の設定値に切り替えられると便利です。たとえば、ローカルと実働サーバでは、異なったキャッシュドライバを使いたいことでしょう。/
s/^To make this a cinch, Laravel utilizes the \[DotEnv\](https:\/\/github\.com\/vlucas\/phpdotenv) PHP library by Vance Lucas\. In a fresh Laravel installation, the root directory of your application will contain a `\.env\.example` file\. If you install Laravel via Composer, this file will automatically be renamed to `\.env`\. Otherwise, you should rename the file manually\.$/これを簡単にできるようにするために、LaravelではVance Lucas氏により作成された、[DotEnv](https:\/\/github.com\/vlucas\/phpdotenv) PHPライブラリーを使用しています。新たにLaravelをインストールすると、アプリケーションのルートディレクトリには、`env.example`ファイルが含まれています。ComposerによりLaravelをインストールした場合は自動的に、このファイルは`.env`に名前が変更されます。Composerを使わずにインストールした場合は、名前を変更してください。/
s/^Your `\.env` file should not be committed to your application's source control, since each developer \/ server using your application could require a different environment configuration\. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed\.$/`.env`ファイルは、アプリケーションのソースコントロールに含めるべきでありません。各ユーザー／サーバは異なった環境設定が必要だからです。さらに、侵入者がソースコントロールリポジトリへアクセスすることが起きれば、機密性の高い情報が漏れてしまうセキュリティリスクになります。/
s/^If you are developing with a team, you may wish to continue including a `\.env\.example` file with your application\. By putting place-holder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application\. You may also create a `\.env\.testing` file\. This file will override the `\.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option\.$/チーム開発を行っている場合、`.env.example`ファイルをアプリケーションに含めたいと思うでしょう。サンプルの設定ファイルに、プレースホルダーとして値を設定しておけば、チームの他の開発者は、アプリケーションを実行するために必要な環境変数をはっきりと理解できるでしょう。さらに、`.env.testing`ファイルを作成することもできます。このファイルは、PHPUnitテスト実行時やArtisanコマンドへ`--env=testing`オプションを指定した場合に、`.env`ファイルをオーバーライドします。/
s/^> {tip} Any variable in your `\.env` file can be overridden by external environment variables such as server-level or system-level environment variables\.$/> {tip} `.env`ファイルにあるすべての変数は、サーバレベルやシステムレベルで定義されている、外部の環境変数によってオーバーライドすることができます。/
s/^### Environment Variable Types$/### 環境変数タイプ/
s/^All variables in your `\.env` files are parsed as strings, so some reserved values have been created to allow you to return a wider range of types from the `env()` function:$/`.env`ファイル中の全変数は、文字列としてパースされます。`env()`関数で様々なタイプを返すために、予約語があります。/
s/^`\.env` Value  | `env()` Value$/`.env`値  | `env()`値/
s/^If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes\.$/空白を含む値を環境変数に定義する場合は、ダブル引用符で囲ってください。/
s/^### Retrieving Environment Configuration$/### 環境設定の取得/
s/^All of the variables listed in this file will be loaded into the `$_ENV` PHP super-global when your application receives a request\. However, you may use the `env` helper to retrieve values from these variables in your configuration files\. In fact, if you review the Laravel configuration files, you will notice several of the options already using this helper:$/このファイルにリストしている値は、アプリケーションがリクエストを受け取った時点で、`$_ENV` PHPスーパーグローバル変数へロードされます。しかし、設定ファイルの変数を`env`ヘルパを使用して、値を取得できます。実際にLaravelの設定ファイルを見てもらえば、このヘルパで多くのオプションが使われているのに気がつくでしょう。/
s/^The second value passed to the `env` function is the "default value"\. This value will be used if no environment variable exists for the given key\.$/`env`関数の第２引数は「デフォルト値」です。この値は指定したキーの環境変数が存在しない場合に返されます。/
s/^### Determining The Current Environment$/### 現在環境の決定/
s/^The current application environment is determined via the `APP_ENV` variable from your `\.env` file\. You may access this value via the `environment` method on the `App` \[facade\](\/docs\/{{version}}\/facades):$/現在のアプリケーション環境は、`.env`ファイルの`APP_ENV`変数により決まります。`APP`[ファサード](\/docs\/{{version}}\/facades)の`environment`メソッドにより、この値へアクセスできます。/
s/^You may also pass arguments to the `environment` method to check if the environment matches a given value\. The method will return `true` if the environment matches any of the given values:$/指定した値と一致する環境であるかを確認するために、`environment`メソッドへ引数を渡すこともできます。必要であれば、複数の値を`environment`メソッドへ渡せます。値のどれかと一致すれば、メソッドは`true`を返します。/
s/^        \/\/ The environment is local$/        \/\/ 環境はlocal/
s/^    if (App::environment(\['local', 'staging'\])) {$/    if (App::environment(['local', 'staging'])) {/
s/^        \/\/ The environment is either local OR staging\.\.\.$/        \/\/ 環境はlocalかstaging/
s/^> {tip} The current application environment detection can be overridden by a server-level `APP_ENV` environment variable\. This can be useful when you need to share the same application for different environment configurations, so you can set up a given host to match a given environment in your server's configurations\.$/> {tip} 現在のアプリケーション環境は、サーバレベルの`APP_ENV`環境変数によりオーバーライドされます。これは同じアプリケーションを異なった環境で実行する場合に便利です。特定のホストに対し、サーバの設定で適切な環境を指定できます。/
s/^## Accessing Configuration Values$/## 設定値へのアクセス/
s/^You may easily access your configuration values using the global `config` helper function from anywhere in your application\. The configuration values may be accessed using "dot" syntax, which includes the name of the file and option you wish to access\. A default value may also be specified and will be returned if the configuration option does not exist:$/アプリケーションのどこからでもグローバルの`config`ヘルパ関数を使用し、設定値へ簡単にアクセスできます。設定値はファイルとオプションの名前を含む「ドット」記法を使いアクセスします。デフォルト値も指定でき、設定オプションが存在しない場合に、返されます。/
s/^    $value = config('app\.timezone');$/    $value = config('app.timezone');/
s/^To set configuration values at runtime, pass an array to the `config` helper:$/実行時に設定値をセットするには、`config`ヘルパへ配列で渡してください。/
s/^    config(\['app\.timezone' => 'America\/Chicago'\]);$/    config(['app.timezone' => 'America\/Chicago']);/
s/^## Configuration Caching$/## 設定キャッシュ/
s/^To give your application a speed boost, you should cache all of your configuration files into a single file using the `config:cache` Artisan command\. This will combine all of the configuration options for your application into a single file which will be loaded quickly by the framework\.$/アプリケーションをスピードアップさせるために、全設定ファイルを一つのファイルへまとめる、`config:cache` Artisanコマンドを使ってください。これによりアプリケーションの全設定ファイルのオプションが、単一のファイルに結合され、素早くロードできるようになります。/
s/^You should typically run the `php artisan config:cache` command as part of your production deployment routine\. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application's development\.$/一般的には、本番へのデプロイ作業の一環として、`php artisan config:cache`コマンドを実行すべきでしょう。アプリケーションの開発期間中は設定が変更されることも多いので、ローカルでの開発中にこのコマンドを実行してはいけません。/
s/^> {note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files\. Once the configuration has been cached, the `\.env` file will not be loaded and all calls to the `env` function will return `null`\.$/> {note} 開発期間中に`config:cache`コマンドを実行する場合は、設定ファイルの中で必ず`env`関数だけを使用してください。設定ファイルがキャッシュされると、`.env`ファイルはロードされなくなり、`env`関数の呼び出しは全て`null`を返します。/
s/^## Maintenance Mode$/## メンテナンスモード/
s/^When your application is in maintenance mode, a custom view will be displayed for all requests into your application\. This makes it easy to "disable" your application while it is updating or when you are performing maintenance\. A maintenance mode check is included in the default middleware stack for your application\. If the application is in maintenance mode, a `MaintenanceModeException` will be thrown with a status code of 503\.$/アプリケーションをメンテナンスモードにすると、アプリケーションに対するリクエストに対し、すべてカスタムビューが表示されるようになります。アプリケーションのアップデート中や、メンテナンス中に、アプリケーションを簡単に「停止」状態にできます。メンテナンスモードのチェックは、アプリケーションのデフォルトミドルウェアスタックに含まれています。アプリケーションがメンテナンスモードの時、ステータスコード503で`MaintenanceModeException`例外が投げられます。/
s/^To enable maintenance mode, execute the `down` Artisan command:$/メンテナンスモードにするには、`down` Artisanコマンドを実行します。/
s/^You may also provide `message` and `retry` options to the `down` command\. The `message` value may be used to display or log a custom message, while the `retry` value will be set as the `Retry-After` HTTP header's value:$/`down`コマンドには、`message`と`retry`オプションを付けることもできます。`message`の値はカスタムメッセージを表示、もしくはログするために使用し、`retry`の値はHTTPヘッダの`Retry-After`としてセットされます。/
s/^Even while in maintenance mode, specific IP addresses or networks may be allowed to access the application using the command's `allow` option:$/コマンドの`allow`オプションを使用し、メンテナンスモードであっても、アプリケーションへアクセスを許すIPアドレスやネットワークを指定できます。/
s/^    php artisan down --allow=127\.0\.0\.1 --allow=192\.168\.0\.0\/16$/    php artisan down --allow=127.0.0.1 --allow=192.168.0.0\/16/
s/^To disable maintenance mode, use the `up` command:$/メンテナンスモードから抜けるには、`up`コマンドを使います。/
s/^> {tip} You may customize the default maintenance mode template by defining your own template at `resources\/views\/errors\/503\.blade\.php`\.$/> {tip} `resources\/views\/errors\/503.blade.php`を独自に定義することにより、メンテナンスモードのデフォルトテンプレートをカスタマイズできます。/
s/^#### Maintenance Mode & Queues$/#### メンテナンスモードとキュー/
s/^While your application is in maintenance mode, no \[queued jobs\](\/docs\/{{version}}\/queues) will be handled\. The jobs will continue to be handled as normal once the application is out of maintenance mode\.$/アプリケーションがメンテナンスモードの間、[キューされたジョブ](\/docs\/{{version}}\/queues)は実行されません。メンテナンスモードから抜け、アプリケーションが通常状態へ戻った時点で、ジョブは続けて処理されます。/
s/^#### Alternatives To Maintenance Mode$/#### メンテナンスモードの代替/
s/^Since maintenance mode requires your application to have several seconds of downtime, consider alternatives like \[Envoyer\](https:\/\/envoyer\.io) to accomplish zero-downtime deployment with Laravel\.$/メンテナンスモードでは、アプリケーションがその間ダウンタイムになってしまいますので、Laravelでの開発でゼロダウンタイムを実現する[Envoyer](https:\/\/envoyer.io)のような代替サービスを検討してください。/
